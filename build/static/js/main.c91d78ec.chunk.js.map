{"version":3,"sources":["Contexts/index.js","Components/PostListComponent/index.jsx","Services/index.js","Components/PostComponent/index.js","Components/UserComponent/index.js","App.js","reportWebVitals.js","index.js"],"names":["applicationContext","createContext","displayName","PostListComponent","history","useHistory","useContext","ApplicationContext","fetchPostList","postList","userMap","fetchUserMap","setCurrentPost","setCurrentUser","useState","searchResult","setResult","searchValue","setValue","useEffect","length","userList","Object","values","map","user","title","name","Grid","className","Column","width","Row","Header","as","floated","Search","loading","onResultSelect","e","data","result","onSearchChange","value","re","RegExp","_","escapeRegExp","results","filter","test","placeHolder","Table","celled","striped","HeaderCell","Body","post","index","Cell","onClick","push","redirectPost","userId","id","getPostList","a","fetch","headers","responseStream","json","response","getUserList","getPostComments","postId","PostComponent","currentPost","fetchPostComments","commentList","setCommentList","updateCommentList","comments","currentUser","Breadcrumb","size","Section","link","Divider","active","Container","text","textAlign","body","username","comment","email","UserComponent","Item","Group","Content","Meta","website","company","Extra","catchPhrase","bs","ContextWrapper","children","setPostList","setUserMap","fetchedPostList","fetchedUserList","reduce","acc","Provider","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c91d78ec.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst applicationContext = createContext();\r\napplicationContext.displayName = \"Application\";\r\n\r\nexport default applicationContext;","import React, { useState, useEffect, useContext } from \"react\";\r\nimport _ from 'lodash'\r\nimport { Table, Menu, Button, Grid, Input, Header, Icon, Search } from 'semantic-ui-react';\r\nimport ApplicationContext from \"../../Contexts\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport default function PostListComponent() {\r\n    const history = useHistory();\r\n\r\n    const {\r\n        fetchPostList,\r\n        postList, \r\n        userMap,\r\n        fetchUserMap,\r\n        setCurrentPost,\r\n        setCurrentUser\r\n    } = useContext(ApplicationContext);\r\n\r\n    const [searchResult, setResult] = useState([]);\r\n    const [searchValue, setValue] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        if (!postList.length) {\r\n            fetchPostList();\r\n            fetchUserMap();\r\n        }\r\n    }, [])\r\n\r\n    const redirectPost = (post) => {\r\n        setCurrentPost(post);\r\n        history.push(\"/post\");\r\n    }\r\n\r\n    const redirectUser = (user) => {\r\n        if (user) {\r\n            setCurrentUser(user);\r\n            history.push(\"/user\");\r\n        }\r\n    }\r\n\r\n    const userList = Object.values(userMap).map(user => ({ title: user.name }));\r\n\r\n    const onSearchChange = (e, data) => {\r\n        setValue(data.value);\r\n        const re = new RegExp(_.escapeRegExp(data.value), 'i');\r\n        const isMatch = (result) => re.test(result.title);\r\n        const results = _.filter(userList, isMatch);\r\n        setResult(results);\r\n    }\r\n    const onResultSelect = (e, data) => {\r\n        setValue(data.result?.title)\r\n    }\r\n\r\n    return (\r\n        <Grid className={\"table-default\"}>\r\n            <Grid.Column width={16}>\r\n                <Grid.Row className={\"table-default\"}>\r\n                    <Header as=\"h1\" floated='left'>\r\n                        Posts\r\n                        </Header>\r\n                    <Header floated='right'>\r\n                        <Search\r\n                            loading={false}\r\n                            onResultSelect={onResultSelect}\r\n                            onSearchChange={onSearchChange}\r\n                            results={searchResult}\r\n                            value={searchValue}\r\n                            placeHolder={\"Search Users\"}\r\n                        />\r\n                    </Header>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Table celled striped>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Post Title</Table.HeaderCell>\r\n                                <Table.HeaderCell>Post Creator</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {postList.map((post, index) =>\r\n                            (<Table.Row key={post.id}>\r\n                                <Table.Cell>\r\n                                    <div onClick={(e) => redirectPost(post)} className={\"pointer\"}>\r\n                                        {post.title}\r\n                                    </div>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <div onClick={(e) => redirectUser(userMap[post.userId])} className={\"pointer\"}>\r\n                                        {userMap[post.userId]?.name || \"NA\"}\r\n                                    </div>\r\n                                </Table.Cell>\r\n                            </Table.Row>),\r\n                            )}\r\n                        </Table.Body>\r\n                    </Table>\r\n                </Grid.Row>\r\n            </Grid.Column>\r\n        </Grid >\r\n    );\r\n}","export const getPostList = async () => {\r\n    try {\r\n        const responseStream = await fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        return response;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const getUserList = async () => {\r\n    try {\r\n        const responseStream = await fetch(`https://jsonplaceholder.typicode.com/users`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        return response;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const getPostComments = async (postId) => {\r\n    try {\r\n        const responseStream = await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        return response;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Grid, Form, Header, Message, Container, Table, Button, Breadcrumb } from 'semantic-ui-react';\r\nimport ApplicationContext from \"../../Contexts\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function PostComponent() {\r\n    const history = useHistory();\r\n\r\n    const {\r\n        currentPost,\r\n        userMap,\r\n        fetchPostComments\r\n    } = useContext(ApplicationContext);\r\n\r\n    const [commentList, setCommentList] = useState([]);\r\n    const updateCommentList = async () => {\r\n        const comments = await fetchPostComments(currentPost.id);\r\n        setCommentList(comments);\r\n    }\r\n    useEffect(updateCommentList, [])\r\n\r\n    const currentUser = userMap[currentPost.userId];\r\n\r\n    const redirectHome = (e) => {\r\n        history.push(\"/\");\r\n    }\r\n    return (\r\n        <Grid className={\"table-default\"}>\r\n            <Grid.Row width={16}>\r\n                <Grid.Column width={3}>\r\n                    <Breadcrumb size={\"big\"}>\r\n                        <Breadcrumb.Section link onClick={redirectHome}>Home</Breadcrumb.Section>\r\n                        <Breadcrumb.Divider />\r\n                        <Breadcrumb.Section active>Post</Breadcrumb.Section>\r\n                    </Breadcrumb>\r\n                </Grid.Column>\r\n                <Grid.Column width={9}>\r\n                    <Container text textAlign='justified'>\r\n                        <Header as='h3'>{currentPost.title}</Header>\r\n                        <p>\r\n                            {currentPost.body}\r\n                        </p>\r\n                    </Container>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} textAlign='justified'>\r\n                    <Container text>\r\n                        <Header as='h3'>{currentUser.username}</Header>\r\n                        <p>\r\n                            {currentUser.name}\r\n                        </p>\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row width={16}>\r\n                <Table celled >\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Comment Subject</Table.HeaderCell>\r\n                            <Table.HeaderCell>Comment Body</Table.HeaderCell>\r\n                            <Table.HeaderCell>Commenter Email</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {commentList.map((comment, index) =>\r\n                        (<Table.Row key={comment.id}>\r\n                            <Table.Cell>{comment.name}</Table.Cell>\r\n                            <Table.Cell>{comment.body}</Table.Cell>\r\n                            <Table.Cell>{comment.email}</Table.Cell>\r\n                        </Table.Row>),\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Row>\r\n        </Grid >)\r\n}","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Grid, Item, Breadcrumb } from 'semantic-ui-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ApplicationContext from \"../../Contexts\";\r\n\r\nexport default function UserComponent() {\r\n    const history = useHistory();\r\n\r\n    const {\r\n        currentUser,\r\n    } = useContext(ApplicationContext);\r\n\r\n    const redirectHome = (e) => {\r\n        history.push(\"/\");\r\n    }\r\n    \r\n    return (\r\n        <Grid className={\"table-default\"}>\r\n            <Grid.Column width={4}>\r\n                <Breadcrumb size={\"big\"}>\r\n                    <Breadcrumb.Section link onClick={redirectHome}>Home</Breadcrumb.Section>\r\n                    <Breadcrumb.Divider />\r\n                    <Breadcrumb.Section active>User</Breadcrumb.Section>\r\n                </Breadcrumb>\r\n            </Grid.Column>\r\n            <Grid.Column width={12}>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>Username</Item.Header>\r\n                            <Item.Meta>{currentUser.username}</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>Full Name</Item.Header>\r\n                            <Item.Meta>{currentUser.name}</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>Email</Item.Header>\r\n                            <Item.Meta>{currentUser.email}</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>Website</Item.Header>\r\n                            <Item.Meta>{currentUser.website}</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>Company Details</Item.Header>\r\n                            <Item.Meta>{currentUser.company?.name}</Item.Meta>\r\n                            <Item.Extra>{currentUser.company?.catchPhrase}</Item.Extra>\r\n                            <Item.Extra>{currentUser.company?.bs}</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                </Item.Group>\r\n            </Grid.Column>\r\n        </Grid >\r\n    )\r\n\r\n}\r\n\r\n","import { MemoryRouter as Router, Switch, Route } from 'react-router-dom';\nimport React, { useState, useContext, useEffect } from 'react';\nimport './App.css';\nimport PostListComponent from './Components/PostListComponent';\nimport ApplicationContext from './Contexts';\nimport { getPostComments, getPostList, getUserList } from './Services';\nimport PostComponent from './Components/PostComponent';\nimport UserComponent from './Components/UserComponent';\n\nconst ContextWrapper = ({\n  children,\n}) => {\n  const [postList, setPostList] = useState([]);\n  const [userMap, setUserMap] = useState({});\n  const [currentPost, setCurrentPost] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const fetchPostList = async () => {\n    try {\n      const fetchedPostList = await getPostList();\n      setPostList(fetchedPostList);\n    } catch (error) {\n      setPostList([]);\n    }\n  }\n\n  const fetchUserMap = async () => {\n    try {\n      const fetchedUserList = await getUserList();\n      const userMap = fetchedUserList.reduce((acc, user) => {\n        acc[user.id] = user;\n        return acc;\n      }, {});\n      setUserMap(userMap);\n    } catch (error) {\n      setUserMap({});\n    }\n  }\n\n  const fetchPostComments = async (postId) => {\n    try {\n      const commentList = await getPostComments(postId);\n      return commentList;\n    } catch (error) {\n    }\n  }\n\n  return (\n    <ApplicationContext.Provider\n      value={{\n        postList,\n        userMap,\n        currentPost,\n        currentUser,\n        fetchPostList,\n        fetchUserMap,\n        setCurrentPost,\n        setCurrentUser,\n        fetchPostComments,\n      }}\n    >\n      {children}\n    </ApplicationContext.Provider>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <ContextWrapper>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={PostListComponent} />\n            <Route path=\"/post\" exact component={PostComponent} />\n            <Route path=\"/user\" exact component={UserComponent} />\n          </Switch>\n        </Router>\n      </ContextWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}